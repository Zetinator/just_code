"""https://www.hackerrank.com/challenges/array-pairs/problem

Consider an array of A integers. Find and print the total number of  pairs such that ai*aj <= max(A) for i < j
"""
from math import factorial
def ncr(n, r):
    if n-r < 0: return 0
    return factorial(n)//(factorial(r)*factorial(n-r))

class SegmentTree():
    class Node():
        def __init__(self, value=None, index=()):
            self.value = value
            self.left = None
            self.right = None
            self.index = index
        # def __repr__(self):
            # return repr(self.value)

    # def __repr__(self):
        # res = []
        # def r(node, level=0):
            # if not node: return
            # r(node.left, level+1)
            # res.append('\t'*level + f'-->({node.value})[{node.index}]')
            # r(node.right, level+1)
        # r(self.root)
        # return '\n'.join(res)
    def __init__(self, v):
        self.v = v
        self.root = None
        self.build()
    def build(self):
        l, r = 0, len(self.v)-1
        def r_build(l, r):
            if l == r: return self.Node(self.v[l], (l, r))
            m = (l+r)//2
            node = self.Node()
            node.left, node.right = r_build(l, m), r_build(m+1, r)
            node.value = max(node.left.value, node.right.value)
            node.index = (l, r)
            return node
        self.root = r_build(l, r)
    def query(self, i, j):
        """return max in the given range (i,j) inclusive, O(log(N))
        """
        if not self.root: return
        if i > j: i, j = j, i
        if not 0 <= i <= j < len(self.v): raise ValueError(f'invalid range: {(i,j)}')
        l, r = 0, len(self.v)-1
        def r_query(node, l, r, i, j):
            if not node or l > r or i > r or j < l: return -float('inf')
            if i <= l <= r <= j: return node.value
            m = (l+r)//2
            return max(r_query(node.left, l, m, i, j),
                        r_query(node.right, m+1, r, i, j))
        return r_query(self.root, l, r, i, j)

def solve(arr):
    """divide and conquer
    """
    solve.res = 0
    tree = SegmentTree(arr)
    indexes = [i for i in range(len(arr))]
    arr = [e for e in zip(arr, indexes)]
    def merge(sub):
        if len(sub) < 2: return sub
        # divide...
        m = len(sub)//2
        left, right = merge(sub[:m]), merge(sub[m:])
        # conquer...
        l, r = 0, 0
        tmp = []
        print(f'--------------------------')
        print(f'left:{left}, right:{right}')
        while l < len(left) and r < len(right):
            if left[l][0] * right[r][0] <= tree.query(left[l][1], right[r][1]):
                print(f'left: {left[l]} right: {right[r]}, max: {tree.query(left[l][1], right[r][1])}')
                solve.res += 1
            if left[l] < right[r]:
                tmp.append(left[l]); l += 1
            else:
                tmp.append(right[r]); r += 1
        while l < len(left):
            tmp.append(left[l]); l += 1
        while r < len(right):
            tmp.append(right[r]); r += 1
        return tmp
    res = merge(arr)
    print(f'res: {res}')
    return solve.res

def solve(arr):
    """naive approach... + segment tree
    """
    # build tree...
    tree = SegmentTree(arr)
    # save the indexes...
    indexes = [i for i in range(len(arr))]
    arr = [e for e in zip(arr, indexes)]
    # sort...
    arr.sort()
    l, r = 0, len(arr)-1
    res = 0
    # print(f'arr: {arr}')
    while r > 0:
        l = 0
        while l < r:
            if arr[l][0] * arr[r][0] > tree.query(arr[l][1], arr[r][1]): break
            # print(f'left: {arr[l]} right: {arr[r]}, max: {tree.query(arr[l][1], arr[r][1])}')
            l += 1
            res += 1
        r -= 1
    return res

# test
test = """1 1 2 4 2"""
test = """1259 7119 6806 8924 8114 3797 6788 3735 6695 7189 5028 2092 8103 2206 3708 7873 7572 6687 8652 7282 3277 6846 9332 3435 6719 8943 8622 1840 792 372 7334 6099 4784 1117 7044 2315 7991 9596 8895 4576 8722 3612 4586 5883 2433 7285 6223 2580 7573 3117 8165 3342 3357 2769 6344 5067 8755 2049 7195 215 5323 7070 8046 2686 2440 8114 1011 3693 5668 5489 6513 9594 9506 1313 1374 3290 7590 5154 2654 4843 7988 3580 7873 6744 6768 3804 5554 3562 2627 4922 1801 9958 5989 6788 3859 6487 5699 4447 9750 9274 2482 7863 9630 8583 98 4567 3306 4633 1010 9373 9404 213 1087 7753 172 8286 1648 9423 4179 2283 4208 5196 7697 1195 7448 6118 6454 8352 3741 1759 2582 6717 7911 6371 7448 4392 6023 7352 5916 963 5821 5840 2376 7848 3711 7953 8138 6278 8253 1171 3208 257 3919 7908 6496 9360 1350 3414 9776 8611 2276 9385 3363 8577 4775 7425 9991 812 5321 5080 7370 8739 9474 590 915 4026 8163 5482 2941 4770 668 9511 8508 3446 6225 5190 4645 7699 8662 6298 1630 1712 4531 9834 5709 5779 9190 7009 6062 2740 5774 9232 7426 6612 676 8336 8072 9322 5791 6724 2298 1489 6040 8098 7699 7392 2560 9874 2135 3099 8664 2977 3802 2031 5540 5876 5588 8144 3716 807 7419 6162 4142 305 4891 9847 2404 1355 5899 8765 5714 9242 7447 8877 6018 6257 7386 9244 6200 3430 169 1092 76 7853 9432 857 3749 2157 1855 6460 2095 45 8013 4187 3872 7798 5876 6981 8603 5619 2973 2146 2632 8345 1376 3456 1044 8218 1349 8265 2098 7248 1580 1037 4214 9200 7441 8590 1906 2039 4388 8536 8254 1292 9270 3621 1701 4497 8306 1127 124 726 1544 6657 592 8538 302 3246 4502 6897 7576 588 3587 3701 1738 6669 6512 2331 8789 3201 669 6168 5889 8750 1067 855 2523 7797 1033 8826 7541 2061 2018 5171 7543 4440 6230 1662 5998 1591 8138 713 8866 875 6067 364 7426 2114 2114 9304 4237 4285 231 9956 6560 7881 9237 5266 3950 86 9227 8236 3797 383 5332 5829 7454 7343 7600 3647 2964 4578 1588 2048 2016 478 5181 6395 456 2044 5332 7555 1767 8044 1660 3193 5163 6671 9026 2564 1223 334 6569 8624 3394 6843 1490 6030 7711 6788 5011 154 4756 8032 5560 6964 6830 9751 5443 5422 9710 4719 9663 5842 1880 1000 1407 2880 1445 3741 3087 7266 7721 3796 2467 7770 8895 5643 2551 3279 4898 9565 7565 1545 6061 2950 2317 9740 6795 2547 2253 3642 4438 3261 6779 2474 963 2097 1332 1066 5715 4769 2485 6514 1672 7067 4472 1232 6518 1436 3346 3751 2596 4294 1069 2645 6347 3034 1642 7721 3522 7060 3199 7585 1032 4000 5797 3655 280 7340 2560 1670 9408 3317 1180 8950 8633 8073 3765 8099 4210 323 7884 2229 9221 4187 6942 9972 865 2494 4541 6242 3362 473 5358 5270 3614 5427 326 8861 2292 666 856 5123 1925 6554 5767 1914 8016 521 1261 2945 8909 5947 6634 6240 8015 9938 7920 4385 5856 342 8709 4143 1094 4075 1122 6170 7664 1683 5348 9296 8110 8012 6500 7792 9360 6232 9389 5636 4833 5498 7416 2124 5144 5179 4884 9588 5307 9575 9774 7987 3457 1129 6545 833 7357 3683 3331 8308 6117 5785 7831 654 7341 2965 3773 8598 8698 2991 5459 713 958 9404 7191 1463 1595 9986 1505 2963 5107 979 9114 4369 8637 4810 3819 1629 7404 6067 6736 2194 6911 7408 1101 6504 627 1231 5123 8715 8608 4883 3647 1893 9220 7823 7318 8547 7590 3207 1127 6236 181 3666 620 9235 9695 343 328 9551 8599 9004 690 9581 2341 1421 3824 7072 2014 3829 6792 1471 6872 6425 5454 6400 6533 8930 7534 8531 5496 1342 9722 9871 7073 4725 9152 3232 7378 7726 4027 8763 8881 510 9643 9397 9428 2924 1097 2536 5317 1618 3013 7892 8463 3286 2859 6066 2881 4637 982 1204 4959 9431 4405 4983 7583 3149 8364 4263 2604 702 1293 7984 139 1240 479 1139 4314 7372 7215 414 2366 4335 2833 4822 5829 8019 2645 2367 1886 9197 2180 2350 1331 8956 7571 2728 9637 1755 5908 417 4088 2942 7850 8170 6357 5618 6783 9229 1142 4596 6170 8177 1878 3330 8419 2965 8715 6167 7948 6678 1989 8960 1345 9280 3836 7962 247 682 2057 4575 3794 7559 2922 1001 9275 6134 6592 2136 9974 8497 8309 9769 8709 3605 3256 4524 3424 2499 3191 7222 2012 7981 7759 9447 2980 6743 3383 9264 7503 4175 7464 1417 1570 9851 5342 4450 6466 3542 7114 5641 6886 9963 4509 9167 5826 3727 5897 3645 2480 6604 1087 8424 3165 8047 27 8261 5941 3152 425 5662 2908 1925 201 6848 580 6115 528 7615 1658 2523 1438 1676 7385 5481 8732 5140 9254 7195 5816 5908 9642 4033 3859 2403 5365 2288 5348 4133 160 5091 9932 7250 3841 5474 637 9038 7955 8896 4036 2425 8470 6631 4245 8629 4661 5295 8468 7582 655 5940 1172 9507 6541 8985 5687 4641 9870 7119 6128 6507 3305 9887 9084 9776 9985 3110 3156 7004 1543 896 1814 1927 6219 5085 7975 4452 772 1605 61 8260 5315 5358 2937 8388 3433 6076 871 4724 3923 9950 1650 1301 3741 4843 2542 4312 5413 3687 5322 546 5272 4324 3421 2479 3705 4093 2014 6183 3971 7655 1064 2227 2257 2922 7257 9913 1597 315 9501 1356 4164 3671 8297 785 4682 4661 7497 5906 944 26 8661 2002 5796 7537 8367 1235 5765 5177 5757 1076 1441 8510 1906 4997 9 9195 1344 6154 3717 8844 8219 8079 4959 3438 4426 9100 4710 1779 8288 7674 8213 6778 8695 5209 198 7782 7110 7726 4759 3087 315 1807 9833 8525 8128 2478 8444 4091 9576 7624 898 8044 1040 3480 6205 7158 4734 2556"""
test = """64866486 34973497 2493 60316031 471 1987 61186118 99749974 99929992 40114011 938 8289 38823882 57795779 3930393 1666 664 53395339 5477 7747 40044004 5444 11381138 6545 7408 18171817 14871487 18581858 4909 7940 5780 6478 9481 8609 6050 52815281 78897889 6788 2554 6170 6653 7595 4661 78447844 66716671 5640564 55605560 4439 4200 2116 3692 1150115 29852985 8400 593 6027 15341534 9674 5487 9759 18331833 49314931 2490249 4468 49904990 1060106 20902090 67076707 361 8555 85198519 73967396 34673467 30023002 73367336 73847384 95389538 78977897 18031803 43954395 10741074 4280428 69996999 45894589 8121 69806980 7350735 48114811 9361 38883888 45664566 77507750 44124412 4727 1960 2651 30743074 70727072 62266226 30123012 24842484 65046504 244 1720172 67186718 7386 28962896 3790 61456145 6441 9161 9381 7506 2022 3868 89678967 9525 1830 8200820 83798379 52565256 34863486 8800880 21552155 58035803 86538653 7955 78507850 16051605 2835 58335833 86808680 61326132 57595759 13251325 77847784 1304 36063606 51635163 50775077 88708870 96109610 2253 7893 90259025 9140 11671167 54795479 14431443 77377737 1830183 4447 90519051 6814 16571657 3622 8566 26562656 24662466 3584 2278 28872887 51645164 78437843 22202220 51185118 59875987 2618 30783078 55795579 28912891 3064 91269126 5310 9956 90739073 7876 73347334 64876487 1068 3573 7735 95409540 8022 1990 8996 58665866 43314331 81268126 84288428 58655865 4850485 6140 9386 456 6800680 5283 52 24822482 19351935 76197619 650065 119 44434443 6709 23602360 3575 6975 78497849 8313 1383 50615061 6902 9374 2070 7982 2482 1208 12621262 54345434 73407340 69796979 3973 554 1422 7866 5497 5171 78597859 7396 6723 7401 86348634 84268426 5367 30943094 94279427 93089308 57075707 18191819 610 1719 92039203 58805880 1075 931 32773277 4192 6356 7445 9073 26552655 4886 8200820 9705 9754 8693 40644064 9709 3953 29342934 1462 3531 8263 23682368 17281728 5063 50625062 28442844 71657165 3285 6717 1443 4235 7230723 90239023 2571 6341 200020 4556 93499349 8565 16141614 66286628 591 3100310 8040804 88148814 91429142 4928 6047 3171 6593 42104210 82928292 1976 8413 1602 6610661 3958 10621062 73617361 13821382 91149114 4737 7872 40374037 6622 5160 48914891 99329932 2571 9983 18321832 51135113 6173 1197 1295 58395839 24662466 646 6715 9363 8600860 5308 4565 9632 19081908 6829 3199 12061206 77187718 32433243 5138 11381138 7005 1751 4469 45204520 74397439 9773 3501 774 13281328 2151 4328 7954 16601660 34573457 4683 5480548 726 5320 6745 4650465 9568 8486 4776 9693 4250 4000 85438543 26092609 4161 7016 5068 4239 40674067 6276 50915091 2630263 5048 91849184 22172217 3466 99589958 8714 7680 74397439 5835 31573157 59945994 907 57925792 9796 82478247 65986598 24692469 3635 7292 3961 4560 8604 7399 4882 44134413 40134013 9885 69706970 8061 8460 6971 2174 84818481 3280 38323832 59815981 465 1561 20092009 1113 78247824 9012 510051 25652565 1439 8217 12491249 22692269 68896889 1490 51295129 2839 2119 22622262 62226222 3863 13961396 13841384 7708 24632463 4649 4984 67786778 345 3408 35073507 6042 565 61236123 4352 7315 6177 7576 1339 16691669 1431 3361 778 4700 4953 9338 1655 64386438 1160116 9604 7853 6837 7799 40954095 8688 8217 1511 62036203 4783 150015 479 5007 8725 34873487 99769976 1775 7893 2091 14541454 54225422 73277327 7852 10731073 6650 7221 39553955 1710 8193 4757 1826 14401440 4113 148 3436 8621 59705970 18341834 1574 6725 9183 38623862 7668 26872687 4218 30743074 39363936 7839 12441244 52785278 2941 2439 58235823 51915191 91049104 93269326 80938093 7006 12691269 62686268 2255 97329732 77517751 3175 3222 3704 58555855 52475247 86618661 798 8134 9531 48934893 99179917 81158115 8988 17691769 2092 48334833 9233 36743674 2397 3254 73727372 47914791 6630663 58165816 4258 77027702 32823282 4542 22462246 9569 5860586 61996199 17651765 74497449 6611 63616361 5746 9978 89498949 5121 72857285 44484448 87938793 706 2410241 1950195 4036 173 4389 70807080 40844084 3529 1866 5134 63246324 42854285 39793979 86788678 9561 15751575 812 5237 9685 87138713 6230 8747 98229822 7473 79007900 15121512 17951795 8141 3289 41924192 1552 1735 6865 4274 3163 89128912 6983 7530753 59155915 3231 7981 72747274 851 31613161 53955395 84798479 5106 5070507 13921392 78627862 1241 35693569 3323 92029202 6381 4481 3360336 48484848 92139213 79677967 8450 59695969 53945394 74257425 3742 72817281 8593 4720472 2353 1587 90429042 28222822 4354 7232 5866 4526 59255925 7630 5212 86958695 9457 5935 24952495 67446744 9512 26502650 7935 1926 7950795 36143614 2900290 8090809 6310 79697969 6215 20222022 66606660 9040904 30333033 1685 71327132 5986 6486 1688 97319731 1865 1776 20972097 79757975 81268126 7580758 7740 65726572 9985 24642464 5716 8699 33703370 4107 2040204 64646464 99719971 6692 57585758 55215521 3054 975 4207 36863686 51425142 4140 41794179 6789 8750 46994699 8010801 9005 3211 59085908 18021802 46334633 71957195 6241 75657565 92269226 99529952 1834 79677967 6758 7834 78607860 8882 17531753 70947094 25172517 2009 70317031 80758075 5413 87548754 7220 79117911 9930993 5404 5176 41204120 7240 1730 327 98629862 34563456 10831083 1233 3798 7859 6928 28232823 64266426 51405140 99569956 55175517 86948694 24742474 99879987 90379037 90849084 49014901 66296629 6088 6860686 23752375 2618 266 14391439 1920192 4159 4781 51595159 8434 9513 5544 16591659 785 7416 8947 10471047 72267226 6734 3306 6978 1894 74247424 1781 98309830 38103810 59465946 44144414 92999299 4647 73087308 24422442 97089708 83568356 6517 5593 50595059 9569 70547054 5372 3886 8881 1550 27612761 10321032 2620 23142314 1790 6979 5394 7067 8429 99639963 85488548 4950495 1151 4884 93639363 45484548 57635763 52835283 65426542 2233 16741674 9072 7500 45974597 64466446 92129212 79017901 4009 87528752 51265126 6096 21252125 3764 28152815 84688468 63576357 25262526 97609760 6901 55005500 82418241 38953895 9217 5787 61366136 4770477 78617861 9693 3338 84858485 373 87838783 53255325 1900190 6577 73467346 58535853 34483448 5997 1358 1191 91079107 8564 8983 7542 9122 93239323 99899989 9246 5306 8714 728 3896 7497 550055 6310631 6402 4086 89908990 36743674 11701170 39113911 69466946 4195 32793279 4613 1290129 89488948 39103910 88798879 36423642 4377 12611261 5314 22182218 10791079 63596359 4871 4542 8262 15571557 52635263 6711 9353 7639 4720 74237423 5224 9747 98659865 3170317 9063 27172717 62136213 6110611 1743 58425842 4798 9457 7347 872 1333 8213 17271727 197 21372137 60236023 5043 701 75197519 7490749 4810 5952 14321432 3429 8457 134 41054105 1842 65836583 666 1937 1958 29542954 4760476 5317 92529252 6637 83198319 64256425 631 1383 3269 2568 58425842 76047604 71047104 42224222 5460546 7448 17091709 96469646 6251 2049 95579557 7090 6879 5530 91249124 38183818 3810381 7041 7642 74977497 2599 8066 95529552 3557 27332733 11801180 47194719 93619361 6572 6480648 9035 21982198 9370 13531353 72177217 6997 4571 49864986 48004800 4476 1786 5090 9418 38863886 2954 84578457 26992699 2381 2076 3609 40144014 78257825"""
# test = """1 1 2 3 3 9 18 4 2"""
test = [int(e) for e in test.split()]
# with open('./test_data.txt', 'r') as f:
    # for line in f:
        # test = [int(n) for n in line.split()]
# from random import uniform
# test = [int(uniform(1,100)) for _ in range(10)]
st = SegmentTree(test)
print(f'testing with: {test}')
res = solve(test)
print(f'ans: {res}')
